---
// src/components/Manifesto.astro
export interface Props {
  title: string;
  manifesto: Array<{
    id: number;
    boldText: string;
    regularText: string;
  }>;
  principles: Array<{
    id: number;
    text: string;
  }>;
}

const { title, manifesto, principles } = Astro.props;
---

<section id="manifesto" class="py-20 border-t border-primary-light">
  <h2 class="text-3xl font-bold text-center mb-12 text-accent-light">{title}</h2>

  <div class="max-w-3xl mx-auto">
    <!-- Toggle buttons -->
    <div class="flex justify-center mb-8">
      <div class="bg-primary-light rounded-full p-1 inline-flex">
        <button 
          id="manifestoBtn" 
          class="px-6 py-2 rounded-full bg-accent-light text-primary font-medium transition-all duration-300"
        >
          Manifesto
        </button>
        <button 
          id="principlesBtn" 
          class="px-6 py-2 rounded-full text-secondary font-medium transition-all duration-300"
        >
          Principles
        </button>
      </div>
    </div>

    <!-- Content container -->
    <div class="relative overflow-hidden">
      <!-- Manifesto list -->
      <div id="manifestoList" class="absolute w-full transition-all duration-500 opacity-100 transform translate-x-0">
        <ul class="space-y-6">
          {manifesto.map(item => (
            <li class="p-6 rounded-lg shadow-md">
              <div class="text-center">
                <p class="text-lg text-secondary">
                  <span class="text-xl font-bold">{item.boldText}</span> {item.regularText}
                </p>
              </div>
            </li>
          ))}
        </ul>
      </div>

      <!-- Principles list -->
      <div id="principlesList" class="absolute w-full transition-all duration-500 opacity-0 transform translate-x-full">
        <ul class="space-y-6">
          {principles.map(item => (
            <li class="p-6 rounded-lg shadow-md">
              <div class="text-center">
                <p class="text-lg text-secondary">{item.text}</p>
              </div>
            </li>
          ))}
        </ul>
      </div>
    </div>
  </div>
</section>

<script>
  // Toggle functionality
  document.addEventListener('DOMContentLoaded', () => {
    const manifestoBtn = document.getElementById('manifestoBtn');
    const principlesBtn = document.getElementById('principlesBtn');
    const manifestoList = document.getElementById('manifestoList');
    const principlesList = document.getElementById('principlesList');
    const contentContainer = manifestoList.parentElement;

    // Function to adjust container height based on active content
    const adjustContainerHeight = (activeContent) => {
      // Set container height to match the active content's height
      contentContainer.style.height = `${activeContent.offsetHeight}px`;
    };

    // Initial height adjustment
    adjustContainerHeight(manifestoList);

    manifestoBtn.addEventListener('click', () => {
      // Update button styles
      manifestoBtn.classList.add('bg-accent-light', 'text-primary');
      manifestoBtn.classList.remove('text-secondary');
      principlesBtn.classList.remove('bg-accent-light', 'text-primary');
      principlesBtn.classList.add('text-secondary');

      // Animate content
      manifestoList.classList.remove('opacity-0', 'translate-x-full');
      manifestoList.classList.add('opacity-100', 'translate-x-0');
      principlesList.classList.remove('opacity-100', 'translate-x-0');
      principlesList.classList.add('opacity-0', 'translate-x-full');

      // Adjust container height
      adjustContainerHeight(manifestoList);
    });

    principlesBtn.addEventListener('click', () => {
      // Update button styles
      principlesBtn.classList.add('bg-accent-light', 'text-primary');
      principlesBtn.classList.remove('text-secondary');
      manifestoBtn.classList.remove('bg-accent-light', 'text-primary');
      manifestoBtn.classList.add('text-secondary');

      // Animate content
      principlesList.classList.remove('opacity-0', 'translate-x-full');
      principlesList.classList.add('opacity-100', 'translate-x-0');
      manifestoList.classList.remove('opacity-100', 'translate-x-0');
      manifestoList.classList.add('opacity-0', 'translate-x-full');

      // Adjust container height
      adjustContainerHeight(principlesList);
    });

    // Handle window resize
    window.addEventListener('resize', () => {
      // Determine which content is currently active
      const activeContent = manifestoList.classList.contains('opacity-100') ? 
        manifestoList : principlesList;
      adjustContainerHeight(activeContent);
    });
  });
</script>
