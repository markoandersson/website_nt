---
// src/components/Testimonials.astro
export interface Props {
  title: string;
  testimonials: Array<{
    text: string | string[];
    role: string;
  }>;
}

const { title, testimonials } = Astro.props;
---

<section id="testimonials" class="py-20 border-t border-primary-light">
  <h2 class="text-3xl font-bold text-center mb-12 text-accent-light">{title}</h2>

  <div class="relative max-w-7xl mx-auto">
    <!-- Navigation buttons -->
    <button id="prev-testimonial" class="absolute left-0 top-1/2 transform -translate-y-1/2 bg-primary-medium p-2 rounded-full z-10 opacity-75 hover:opacity-100">
      <span class="sr-only">Previous</span>
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-accent-light" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
      </svg>
    </button>

    <button id="next-testimonial" class="absolute right-0 top-1/2 transform -translate-y-1/2 bg-primary-medium p-2 rounded-full z-10 opacity-75 hover:opacity-100">
      <span class="sr-only">Next</span>
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-accent-light" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
      </svg>
    </button>

    <!-- Carousel container -->
    <div id="testimonials-carousel" class="overflow-hidden px-10">
      <div id="testimonials-track" class="flex transition-transform duration-300 ease-in-out">
        {testimonials.map(testimonial => (
          <div class="flex-shrink-0 w-full md:w-1/2 lg:w-1/3 p-4">
            <div class="bg-primary-medium p-6 rounded-lg shadow-lg  flex flex-col">
              <div class="mb-4 text-accent-light">
                <i class="fa-solid fa-quote-left text-2xl opacity-50"></i>
              </div>
              {Array.isArray(testimonial.text) ? (
                testimonial.text.map((paragraph) => (
                  <p class="text-light italic flex-grow mb-6 leading-relaxed">"{paragraph}"</p>
                ))
              ) : (
                <p class="text-light italic flex-grow mb-6 leading-relaxed">"{testimonial.text}"</p>
              )}
              <div class="mt-auto">
                <p class="text-accent-lighter font-semibold">â€” {testimonial.role}</p>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>

    <!-- Pagination dots -->
    <div class="testimonial-dots flex justify-center mt-4">
      {testimonials.map((_, index) => (
        <button 
          class="testimonial-dot mx-1 w-3 h-3 rounded-full bg-primary-light opacity-50 hover:opacity-100 focus:opacity-100" 
          data-index={index}
          aria-label={`Go to testimonial ${index + 1}`}
        ></button>
      ))}
    </div>
  </div>
</section>

<script>
  // Carousel functionality
  document.addEventListener('DOMContentLoaded', () => {
    const track = document.getElementById('testimonials-track');
    const slides = Array.from(track.children);
    const nextButton = document.getElementById('next-testimonial');
    const prevButton = document.getElementById('prev-testimonial');
    const dotsNav = document.querySelector('.testimonial-dots');
    const dots = Array.from(document.querySelectorAll('.testimonial-dot'));

    if (!track || slides.length === 0) return;

    // Get the width of a slide
    const slideWidth = slides[0].getBoundingClientRect().width;

    // Arrange slides next to each other
    const setSlidePosition = (slide, index) => {
      slide.style.left = slideWidth * index + 'px';
    };
    slides.forEach(setSlidePosition);

    // Function to move to a specific slide
    const moveToSlide = (currentIndex) => {
      track.style.transform = `translateX(-${slideWidth * currentIndex}px)`;

      // Update active dot
      dots.forEach((dot, index) => {
        if (index === currentIndex) {
          dot.classList.add('opacity-100');
          dot.classList.remove('opacity-50');
        } else {
          dot.classList.add('opacity-50');
          dot.classList.remove('opacity-100');
        }
      });
    };

    // Set first dot as active initially
    if (dots.length > 0) {
      dots[0].classList.add('opacity-100');
      dots[0].classList.remove('opacity-50');
    }

    // Next button click handler
    nextButton.addEventListener('click', () => {
      const currentDot = dotsNav.querySelector('.opacity-100');
      const currentIndex = dots.indexOf(currentDot);
      const nextIndex = (currentIndex + 1) % slides.length;
      moveToSlide(nextIndex);
    });

    // Previous button click handler
    prevButton.addEventListener('click', () => {
      const currentDot = dotsNav.querySelector('.opacity-100');
      const currentIndex = dots.indexOf(currentDot);
      const prevIndex = (currentIndex - 1 + slides.length) % slides.length;
      moveToSlide(prevIndex);
    });

    // Dot click handler
    dotsNav.addEventListener('click', (e) => {
      const targetDot = e.target.closest('button');
      if (!targetDot) return;

      const targetIndex = parseInt(targetDot.dataset.index);
      moveToSlide(targetIndex);
    });
  });
</script>
